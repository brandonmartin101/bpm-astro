import { c as createAstro, a as createComponent, r as renderTemplate, e as renderComponent, m as maybeRenderHead } from '../astro_3995580b.mjs';
import 'html-escaper';
import 'clsx';
import { $ as $$PageLayout } from './404_fe81952d.mjs';
import { ssr, ssrHydrationKey, escape as escape$1 } from 'solid-js/web';
import { useState } from 'react';
import { createSignal } from 'solid-js';
import { ref, useSSRContext } from 'vue';
import { ssrInterpolate, ssrRenderSlot } from 'vue/server-renderer';
/* empty css                         *//* empty css                         *//* empty css                         */
const _tmpl$$1 = ["<div", ' class="counter"><button>-</button><pre>', "</pre><button>+</button></div>"], _tmpl$2$1 = ["<div", ' class="counter-message">', "</div>"];
function Counter({
  children
}) {
  const [count, setCount] = useState(0);
  return [ssr(_tmpl$$1, ssrHydrationKey(), escape$1(count)), ssr(_tmpl$2$1, ssrHydrationKey(), escape$1(children))];
}

const _tmpl$ = ["<div", ' id="solid" class="counter"><button>-</button><pre>', "</pre><button>+</button></div>"], _tmpl$2 = ["<div", ' class="counter-message">', "</div>"];
function SolidCounter({
  children
}) {
  const [count, setCount] = createSignal(0);
  return [ssr(_tmpl$, ssrHydrationKey(), escape$1(count())), ssr(_tmpl$2, ssrHydrationKey(), escape$1(children))];
}

const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};

const _sfc_main = {
  setup() {
    const count = ref(0);
    const add = () => count.value = count.value + 1;
    const subtract = () => count.value = count.value - 1;
    return {
      count,
      add,
      subtract
    };
  }
};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<!--[--><div class="counter"><button>-</button><pre>${ssrInterpolate($setup.count)}</pre><button>+</button></div><div class="counter-message">`);
  ssrRenderSlot(_ctx.$slots, "default", {}, null, _push, _parent);
  _push(`</div><!--]-->`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("src/components/VueCounter.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const VueCounter = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);

/** @returns {void} */

function run(fn) {
	return fn();
}

function blank_object() {
	return Object.create(null);
}

/**
 * @param {Function[]} fns
 * @returns {void}
 */
function run_all(fns) {
	fns.forEach(run);
}

let current_component;

/** @returns {void} */
function set_current_component(component) {
	current_component = component;
}

const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;

/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 * @param {unknown} value
 * @returns {string}
 */
function escape(value, is_attr = false) {
	const str = String(value);
	const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
	pattern.lastIndex = 0;
	let escaped = '';
	let last = 0;
	while (pattern.test(str)) {
		const i = pattern.lastIndex - 1;
		const ch = str[i];
		escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
		last = i + 1;
	}
	return escaped + str.substring(last);
}

let on_destroy;

/** @returns {{ render: (props?: {}, { $$slots, context }?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; }; $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any; }} */
function create_ssr_component(fn) {
	function $$render(result, props, bindings, slots, context) {
		const parent_component = current_component;
		const $$ = {
			on_destroy,
			context: new Map(context || (parent_component ? parent_component.$$.context : [])),
			// these will be immediately discarded
			on_mount: [],
			before_update: [],
			after_update: [],
			callbacks: blank_object()
		};
		set_current_component({ $$ });
		const html = fn(result, props, bindings, slots);
		set_current_component(parent_component);
		return html;
	}
	return {
		render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
			on_destroy = [];
			const result = { title: '', head: '', css: new Set() };
			const html = $$render(result, props, {}, $$slots, context);
			run_all(on_destroy);
			return {
				html,
				css: {
					code: Array.from(result.css)
						.map((css) => css.code)
						.join('\n'),
					map: null // TODO
				},
				head: result.title + result.head
			};
		},
		$$render
	};
}

/* C:/Users/BMartin/Documents/GitHub/bpm-astro/src/components/SvelteCounter.svelte generated by Svelte v4.2.0 */

const SvelteCounter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let count = 0;

	return `  <div class="counter"><button data-svelte-h="svelte-16beh1d">-</button> <pre>${escape(count)}</pre> <button data-svelte-h="svelte-1775dtu">+</button></div> <div class="counter-message">${slots.default ? slots.default({}) : ``}</div>`;
});

const $$Astro = createAstro("https://brandonmartin.dev");
const $$Misc = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Misc;
  return renderTemplate`${renderComponent($$result, "PageLayout", $$PageLayout, { "title": "Misc" }, { "default": ($$result2) => renderTemplate`${maybeRenderHead()}<h1>Misc</h1><p>Misc page to hold any code snippets I just need to throw somewhere</p>${renderComponent($$result2, "react.Counter", Counter, { "client:visible": true, "client:component-hydration": "visible", "client:component-path": "C:/Users/BMartin/Documents/GitHub/bpm-astro/src/components/ReactCounter", "client:component-export": "Counter" }, { "default": ($$result3) => renderTemplate`<h1>Hello from React!</h1>` })}${renderComponent($$result2, "SolidCounter", SolidCounter, { "client:visible": true, "client:component-hydration": "visible", "client:component-path": "C:/Users/BMartin/Documents/GitHub/bpm-astro/src/components/SolidCounter", "client:component-export": "default" }, { "default": ($$result3) => renderTemplate`<h1>Hello from Solid!</h1>` })}${renderComponent($$result2, "VueCounter", VueCounter, { "client:visible": true, "client:component-hydration": "visible", "client:component-path": "C:/Users/BMartin/Documents/GitHub/bpm-astro/src/components/VueCounter.vue", "client:component-export": "default" }, { "default": ($$result3) => renderTemplate`<h1>Hello from Vue!</h1>` })}${renderComponent($$result2, "SvelteCounter", SvelteCounter, { "client:visible": true, "client:component-hydration": "visible", "client:component-path": "C:/Users/BMartin/Documents/GitHub/bpm-astro/src/components/SvelteCounter.svelte", "client:component-export": "default" }, { "default": ($$result3) => renderTemplate`<h1>Hello from Svelte!</h1>` })}` })}`;
}, "C:/Users/BMartin/Documents/GitHub/bpm-astro/src/pages/misc.astro", void 0);

const $$file = "C:/Users/BMartin/Documents/GitHub/bpm-astro/src/pages/misc.astro";
const $$url = "/misc";

export { $$Misc as default, $$file as file, $$url as url };
